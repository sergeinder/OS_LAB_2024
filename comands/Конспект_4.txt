1 Задание
Функция `kill` -  Функция для отправки сигнала процессу из libC
Функция Waitpid с опцией WNOHANG используется, если нужно дождаться завершения дочернего процесса, но при этом не блокировать текущеий процесс

Функция alarm в языке программирования C используется для планирования отправки сигнала SIGALRM через определенное количество секунд. Этот сигнал может быть 
использован для реализации таймеров или для прерывания длительных операций по истечении определенного времени.
Сигнал SIGALRM — это сигнал, который отправляется процессу, когда истекает время, установленное функцией alarm. Этот сигнал может быть перехвачен и обработан с 
помощью функции signal.

2 Задание 
Зомби-процесс — это дочерний процесс, который завершил свое выполнение, но еще не был удален из таблицы процессов операционной системы.
Как появляются зомби-процессы:
Дочерний процесс завершает свое выполнение, вызывая exit() или возвращая значение из main().
Операционная система помечает этот процесс как "завершенный", но не удаляет его из таблицы процессов.

или

Родительский процесс не вызывает wait() или waitpid() для получения статуса завершения дочернего процесса.
В результате, дочерний процесс остается в таблице процессов как "зомби", занимая место в таблице, но не потребляя ресурсы (кроме места в таблице).

Как исчезают зомби-процессы:
Родительский процесс вызывает wait() или waitpid() для получения статуса завершения дочернего процесса.

Или

Родительский процесс завершился и автоматически вызвал wait для всех дочерних процессов

Как избежать зомби-процессов:
В родительском процессе всегда вызывайте wait() или waitpid() для получения статуса завершения дочерних процессов.
Можно установить обработчик сигнала SIGCHLD, который будет автоматически вызывать wait() при завершении дочернего процесса.

3 задание

The addresses of these symbols indicate the end of various program segments:
etext

This is the first address past the end of the text segment (the program code).
edata

This is the first address past the end of the initialized data segment.
end

etext:
Указывает на конец сегмента кода (текста) программы.
Это адрес, следующий за последней инструкцией в сегменте кода.

edata:
Указывает на конец сегмента данных (данные, инициализированные переменные).
Это адрес, следующий за последней инициализированной переменной в сегменте данных.

end:
Указывает на конец (сегмента инициализированные данные).
Это адрес, следующий за последней переменной в сегменте BSS.


5 задание

