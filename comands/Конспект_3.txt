2-3 Задание

Pipe() - это канал связи для общения между процессорами
Fork() - нужен для создания дочернего процесса, который является копией текущего процесса

Аргументы включают:

--seed: Начальное значение для генератора случайных чисел.
--array_size: Размер массива.
--pnum: Количество процессов.
--by_files или -f: Флаг, указывающий, использовать ли файлы для межпроцессного взаимодействия вместо каналов (pipes).


Если флаг --by_files не установлен, программа создает канал для межпроцессного взаимодействия.

Создание дочерних процессов:
Программа создает указанное количество дочерних процессов с помощью функции fork.
Каждый дочерний процесс обрабатывает свою часть массива и находит минимальное и максимальное значения в этой части.
Результаты обработки дочерние процессы либо записывают в файлы, либо отправляют через канал.
Ожидание завершения дочерних процессов:
Родительский процесс ожидает завершения всех дочерних процессов с помощью функции wait.

Что происходит при использовании флага --by_files
Создание файлов:
Каждый дочерний процесс создает файл с именем, основанным на его индексе (например, file0, file1, и т.д.).
Дочерний процесс записывает свои результаты (минимальное и максимальное значения) в соответствующий файл.

Задание 4
Флаг -I. указывает компилятору искать заголовочные файлы в текущей директории (.).

All: Это основная цель, которая будет выполнена, если вы запустите make без указания конкретной цели. 
Она зависит от трех других целей: sequential_min_max, parallel_min_max и run_sequential_min_max.

Далее мы расписываем каждую дочернюю цель, линкуя файлы

Цель clean удаляет все цели