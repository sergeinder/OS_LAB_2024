TCP (Transmission Control Protocol) — это один из основных протоколов транспортного уровня модели OSI, 
который обеспечивает надежную и последовательную передачу данных между приложениями, работающими в сети. TCP является протоколом с установлением соединения, 
что означает, что перед началом передачи данных он устанавливает соединение между отправителем и получателем.
TCP гарантирует доставку данных без ошибок и в правильном порядке. Если пакет данных потерян, поврежден или прибыл не в том порядке, 
TCP обнаруживает это и запрашивает повторную передачу.
Перед началом передачи данных TCP устанавливает соединение с помощью трехстороннего рукопожатия (three-way handshake). Этот процесс включает в себя 
отправку SYN (синхронизации) пакета от отправителя к получателю, ответ получателя 
SYN-ACK (синхронизация-подтверждение) и окончательное подтверждение ACK (подтверждение) от отправителя.
Передача данных:
Отправитель разбивает данные на пакеты и отправляет их получателю.
Получатель подтверждает получение каждого пакета ACK пакетом.
Если пакет потерян или поврежден, получатель запрашивает повторную передачу.
Завершение соединения:
Отправитель или получатель инициируют завершение соединения, отправляя FIN (завершение) пакет.
Другая сторона отвечает ACK пакетом.
Вторая сторона также отправляет FIN пакет.
Первая сторона отвечает ACK пакетом.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TCP/IP (Transmission Control Protocol/Internet Protocol) — это набор протоколов, который лежит в основе работы Интернета и большинства локальных сетей. TCP/IP обеспечивает 
надежную передачу данных между устройствами в сети, используя два основных протокола: TCP и IP.
IP отвечает за адресацию и маршрутизацию пакетов данных в сети. Каждое устройство в сети имеет уникальный IP-адрес, 
который используется для идентификации и доставки пакетов данных.
IP работает на сетевом уровне модели OSI и обеспечивает ненадежную доставку пакетов данных, то есть не гарантирует, что пакеты будут доставлены без 
ошибок или в правильном порядке.
Синхронизация, передача и окончание обмена пакетами происходят аналогично TCP
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Отличие TCP от UDP
Надежность:
TCP:
Гарантирует надежную передачу данных. Если пакет данных потерян, поврежден или прибыл не в том порядке, TCP обнаруживает это и запрашивает повторную передачу.
Использует механизмы подтверждения получения (ACK), повторной передачи и упорядочивания пакетов.
UDP:
Не гарантирует надежную передачу данных. Пакеты могут быть потеряны, повреждены или прибыть не в том порядке.
Не использует механизмы подтверждения получения, повторной передачи или упорядочивания пакетов.

Установление соединения:
TCP:
Устанавливает соединение между отправителем и получателем с помощью трехстороннего рукопожатия (SYN, SYN-ACK, ACK) перед началом передачи данных.
UDP:
Не устанавливает соединение. Данные отправляются без предварительного рукопожатия.

Потоковое управление:
TCP:
Управляет потоком данных, чтобы предотвратить перегрузку сети или получателя. Использует механизмы управления потоком, такие как окно передачи (window size).
UDP:
Не управляет потоком данных. Отправитель может отправлять данные с любой скоростью, не заботясь о том, готов ли получатель к приему.

Управление перегрузкой:
TCP:
Включает механизмы управления перегрузкой, такие как медленный старт (slow start) и предотвращение перегрузки (congestion avoidance), чтобы предотвратить перегрузку сети.
UDP:
Не включает механизмы управления перегрузкой. Отправитель может отправлять данные с любой скоростью, что может привести к перегрузке сети.

Последовательная передача:
TCP:
Гарантирует, что данные будут доставлены в том порядке, в котором они были отправлены. Каждый пакет данных имеет порядковый номер, который используется 
для упорядочивания пакетов при их получении.
UDP:
Не гарантирует последовательную передачу данных. Пакеты могут прибыть в произвольном порядке.

Задержки:
TCP:
Вносит задержки из-за механизмов надежности, таких как подтверждение получения и повторная передача.
UDP:
Обычно имеет меньшие задержки, так как не использует механизмы надежности.

Применение:
TCP:
Используется в приложениях, где важна надежность передачи данных, таких как веб-браузеры (HTTP, HTTPS), электронная почта (SMTP, POP3, IMAP), 
файловые передачи (FTP), удаленный доступ (SSH, Telnet).
UDP:
Используется в приложениях, где важна скорость передачи данных и некритичны потери пакетов, таких как потоковое видео (VoD), онлайн-игры, VoIP 
(голосовая связь через интернет), DNS (Domain Name System).
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Системный вызов socket — это фундаментальная операция в операционных системах, которая используется для создания сокета (socket), 
то есть конечной точки для обмена данными в сети. 
Сокеты являются основой для сетевых коммуникаций и используются для реализации различных сетевых протоколов, таких как TCP, UDP и другие.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Системный вызов bind: Связывает сокет с локальным адресом и портом.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Системный вызов listen: Переводит сокет в режим прослушивания входящих соединений.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Системный вызов accept: Принимает входящее соединение на прослушивающем сокете.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Системный вызов recv: Получает данные из сокета.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Системный вызов send: Отправляет данные в сокет.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Системный вызов close: Закрывает сокет.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Системный вызов connect: Устанавливает соединение с сервером.